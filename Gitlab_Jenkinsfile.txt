pipeline {
    agent any
    
    environment {
        // Tên chung cho ứng dụng
        APP_NAME = "maf-coaching-tool"
        
        // Tên cho Service (ClusterIP)
        APP_SERVICE_NAME = "maf-coaching-tool-svc"
        
        // Tên miền public cho Ingress
        APP_HOST_URL = "http://maf-tool.tonytechlab.com" 

        // Đường dẫn image trên registry
        APP_IMAGE_NAME = "register.tonytechlab.com/tonytechlab/maf-coaching-tool" // Giả sử path là tonytechlab/maf-coaching-tool

        // Credentials IDs (Tái sử dụng từ lab corejs)
        K8S_CONFIG_ID = 'k8s-user-creds' 
        REGISTRY_LOGIN_ID = 'gitlab-registry-login'

        // Namespace K8s (Giả sử bạn deploy chung vào namespace cũ để dùng chung secret)
        K8S_NAMESPACE = 'maf-tool'
    }

    stages {
        stage('Stage 1: Checkout Latest Code') {
            steps {
                echo 'Starting to check out code...'
                cleanWs()
                checkout scm
                echo "SUCCESS: Code checkout complete."
            }
        }

        // === STAGE 2: BUILD & PUSH APP ===
        // (Gộp 2 stage 2a và 2b thành 1)
        stage('Stage 2: Build & Push App') { 
            steps {
                echo "INFO: Logging into Registry..."
                withCredentials([usernamePassword(credentialsId: REGISTRY_LOGIN_ID, usernameVariable: 'REG_USER', passwordVariable: 'REG_PASS')]) {
                    sh "docker login register.tonytechlab.com -u ${REG_USER} -p ${REG_PASS}"
                }
                
                echo "INFO: Building App image..."
                // Build từ thư mục gốc (.), nơi chứa Dockerfile
                sh "docker build -t ${APP_IMAGE_NAME}:latest ." 
                
                echo "INFO: Pushing App image..."
                sh "docker push ${APP_IMAGE_NAME}:latest"

                echo "INFO: Logging out from Registry..."
                sh "docker logout register.tonytechlab.com"
            }
        }

        // === STAGE 3: DEPLOY TO KUBERNETES ===
        // (Đã loại bỏ các bước của backend)
        stage('Stage 3: Deploy to Kubernetes') {
            steps {
                echo 'Starting deployment to Kubernetes cluster...'
                
                withCredentials([file(credentialsId: K8S_CONFIG_ID, variable: 'KUBECONFIG_FILE_PATH')]) {
                    withEnv(["KUBECONFIG=${KUBECONFIG_FILE_PATH}"]) {
                        
                        echo '0. Cleaning up old resources...'
                        sh "kubectl delete deployment ${APP_NAME} --namespace=${K8S_NAMESPACE} || true"
                        sh "kubectl delete service ${APP_SERVICE_NAME} --namespace=${K8S_NAMESPACE} || true"
                        sh "kubectl delete ingress maf-ingress --namespace=${K8S_NAMESPACE} || true"

                        echo '1. Applying Namespace and Secret...'
                        sh "kubectl apply -f k8s/namespace.yaml || true"
                        sh "kubectl apply -f k8s/registry-secret.yaml --namespace=${K8S_NAMESPACE}"

                        echo '2. Applying Deployment, Service, and Ingress...'
                        sh "kubectl apply -f k8s/maf-service.yaml --namespace=${K8S_NAMESPACE}"
                        sh "kubectl apply -f k8s/maf-deployment.yaml --namespace=${K8S_NAMESPACE}"
                        sh "kubectl apply -f k8s/maf-ingress.yaml --namespace=${K8S_NAMESPACE}"

                        echo '3. Waiting 5 seconds...'
                        sh "sleep 5" 

                        echo '4. Waiting for deployment to complete...'
                        sh "kubectl rollout status deployment/${APP_NAME} --namespace=${K8S_NAMESPACE}"
                        
                        echo '5. Getting Service Access URLs...'
                        script {
                            echo "----------------------------------------------------"
                            echo "✅ Frontend (Ingress): ${APP_HOST_URL}  (Truy cập từ bên ngoài qua Load Balancer/NPM)"
                            echo "----------------------------------------------------"
                        }
                    }
                }
            }
        }
    } // End of stages
    
    post {
        // ... (Giữ nguyên post actions) ...
        always {
            echo 'Pipeline has finished (Regardless of success or failure).'
        }
        success {
            echo '✅ SUCCESS: Pipeline completed successfully!'
        }
        failure {
            echo '❌ FAILED: Pipeline failed.'
        }
    } // End of post
}